{
    "bass_glitch": {
      "original": "play{AllpassC.ar(SinOsc.ar(55).tanh,0.4,TExpRand.ar(2e-4, 0.4,Impulse.ar(8)).round([2e-3,4e-3]),2)};// #supercollider with bass please...",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["bass", "glitch", "allpass", "random", "feedback"],
      "description": "Glitchy bass sound using Allpass feedback and random timing.",
      "suggested_ndef_name": "bass_glitch",
      "source_url": "https://earslap.com/"
    },
    "untuned_note_ascending": {
      "original": "{a=LocalIn.ar;LocalOut.ar(Mix.ar(x=SinOsc.ar((Decay.ar(Impulse.ar([4,4.005]),1e3*a.abs)*50), a).distort));x;}.play;//tryingharder_to_noavail",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["feedback", "distortion", "ascending", "experimental"],
      "description": "Distorted feedback tone that ascends based on input intensity.",
      "suggested_ndef_name": "untuned_note_ascending",
      "source_url": "https://earslap.com/"
    },
    "repeated_tone_glitch1": {
      "original": "{f=LocalIn.ar(2).tanh;k=Latch.kr(f[0].abs,Impulse.kr(0.5));LocalOut.ar(f+AllpassN.ar(Pulse.ar([2,3],k*0.01+1e-6,0.9),1,k*0.3,100*k));f}.play",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["feedback", "glitch", "pulse", "allpass", "rhythm"],
      "description": "Rhythmic glitchy feedback using Allpass and pulsing.",
      "suggested_ndef_name": "repeated_tone_glitch1",
      "source_url": "https://earslap.com/"
    },
    "repeated_tone_glitch2": {
      "original": "play{f=LocalIn.ar(2).tanh;k=Latch.kr(f[0].abs,Impulse.kr(1/4));LocalOut.ar(f+CombC.ar(Blip.ar([4,6],100*k+50,0.9),1,k*0.3,50*f));f}//44.1kHz",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["feedback", "glitch", "blip", "comb", "rhythm"],
      "description": "Another rhythmic glitch, using Comb delay and Blip.",
      "suggested_ndef_name": "repeated_tone_glitch2",
      "source_url": "https://earslap.com/"
    },
    "raining": {
      "original": "play{Mix({a=LFNoise1.ar(0.2.rand);DelayC.ar(BPF.ar(WhiteNoise.ar(Dust2.ar(a*a*4**2).lag(8e-3)),10e3.rand+300,0.09),3,a*1.5+1.5,45)}!80).dup}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["ambient", "rain", "noise", "texture", "delay", "filter"],
      "description": "Simulates rain sounds using filtered noise and delays.",
      "suggested_ndef_name": "raining",
      "source_url": "https://earslap.com/"
    },
    "frog_quacking": {
      "original": "play{a=BPF.ar(Saw.ar([40,40.001]),LFNoise0.kr(128)+1*4e3+146,LFNoise1.kr(1)+1*5e-2+0.01).tanh;CombC.ar(a,9,a.abs.lag(2)*9,a.abs.lag(1)*100)}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["animal", "frog", "quack", "comb", "saw", "filter", "weird"],
      "description": "An attempt at a frog/duck quacking sound using filters and comb delay.",
      "suggested_ndef_name": "frog_quacking",
      "source_url": "https://earslap.com/"
    },
    "atonal_rhythmic_accompaniment": {
      "original": "play{LocalOut.ar(x=DelayC.ar(LPF.ar(LFNoise0.ar(8)**2+LocalIn.ar(2).tanh.round(0.05),6e3),1,LFNoise0.ar(8!2).range(1e-4,0.02)));x.tanh}//#sc",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["rhythm", "atonal", "feedback", "delay", "noise", "filter"],
      "description": "Atonal rhythmic texture using feedback, delay, and noise.",
      "suggested_ndef_name": "atonal_rhythmic_accompaniment",
      "source_url": "https://earslap.com/"
    },
    "tone_motif": {
      "original": "play{t=Impulse.ar(8)*LFNoise1.ar(2);CombL.ar(Saw.ar([3,4],Decay.ar(t,0.1)).tanh,1,TRand.ar(0,0.01,t).round(15e-4),TRand.ar(-30,30,t))};//#sc",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["motif", "comb", "saw", "decay", "random"],
      "description": "Simple tonal motif processed through a comb delay with random parameters.",
      "suggested_ndef_name": "tone_motif",
      "source_url": "https://earslap.com/"
    },
    "gliding_clusters": {
      "original": "play{LocalOut.ar(x=LFNoise1.ar(0.5*LocalIn.ar(1)+0.1,0.5,0.5));PitchShift.ar(PitchShift.ar(Pulse.ar([90,90.01],x),10,x*4,x),10,4-(x*4),1-x)}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["pitchshift", "cluster", "feedback", "pulse", "experimental"],
      "description": "Gliding pitch-shifted clusters based on feedback noise.",
      "suggested_ndef_name": "gliding_clusters",
      "source_url": "https://earslap.com/"
    },
    "minimal_patterns": {
      "original": "play{q=[0,3,5,7,10];t=Impulse.kr(4)*LFNoise0.kr>0;PitchShift.ar(Saw.ar(Demand.kr(t,0,Drand((q+12++q+33).midicps,inf)),Decay.kr(t,3)),7,2)!2}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["pattern", "minimal", "pitchshift", "sequence", "pentatonic"],
      "description": "Minimal pitch-shifted sequence based on pentatonic scale fragments.",
      "suggested_ndef_name": "minimal_patterns",
      "source_url": "https://earslap.com/"
    },
    "percussive_pentatonic": {
      "original": "play{t=[0,3,5,7,10,12]+30;a=Demand.kr(Impulse.kr(8),0,Drand(t+24++t,inf));(BHiPass.ar(LFNoise1.ar(8)**3,[a,a+0.2].midicps,a/2e3,67-a)).tanh}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["percussive", "pentatonic", "filter", "sequence", "noise"],
      "description": "Percussive sounds derived from filtered noise shaped by pentatonic sequences.",
      "suggested_ndef_name": "percussive_pentatonic",
      "source_url": "https://earslap.com/"
    },
    "percussive_phrygian": {
      "original": "play{t=[0,0,0,1,5,7,10,12,12,12]+30;a=Duty.kr(1/8,0,Dxrand(t+24++t++t,inf));(BHiPass.ar(LFNoise1.ar(8)**6,[a,a+7].midicps,a/3e3,67-a)).tanh}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["percussive", "phrygian", "filter", "sequence", "noise", "rhythm"],
      "description": "Percussive sounds derived from filtered noise shaped by Phrygian-like sequences.",
      "suggested_ndef_name": "percussive_phrygian",
      "source_url": "https://earslap.com/"
    },
    "kick_pattern": {
      "original": "play{LeakDC.ar(BRF.ar(Saw.ar(8,Decay2.kr(x=Duty.kr(1/8,0,Drand([0,Drand((0.4,0.5..1))],inf)),0.01,0.3))**1.5,x*20+[45.1,45],0.1)).tanh}//#sc",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["kick", "bassdrum", "rhythm", "pattern", "saw", "filter", "decay"],
      "description": "A synthesized kick drum pattern using filtered saw waves.",
      "suggested_ndef_name": "kick_pattern",
      "source_url": "https://earslap.com/"
    },
    "synth_polyrhythms": {
      "original": "play{t=Impulse.kr(1/4);k=Duty.kr(2,0,Dxrand((50,52..90),inf));r={|a|Saw.ar(TIRand.kr(1,6,t),a+1*3)}!3;BPF.ar(r.sum,[k,k+0.5],1/9,50).tanh}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["polyrhythm", "synth", "sequence", "saw", "filter", "random"],
      "description": "Filtered synth polyrhythms with random elements.",
      "suggested_ndef_name": "synth_polyrhythms",
      "source_url": "https://earslap.com/"
    },
    "glissandi2major": {
      "original": "play{Mix({|k|k=k+1/2;2/k*Mix({|i|i=i+1;Blip.ar(i*XLine.kr(rand(2e2,4e2),87+LFNoise2.kr(2)*k,15),2,1/(i/a=XLine.kr(0.3,1,9))/9)}!9)}!40)!2*a}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["glissando", "harmonic", "blip", "xline", "generative"],
      "description": "Complex texture of Blip glissandi resolving towards harmonics.",
      "suggested_ndef_name": "glissandi2major",
      "source_url": "https://earslap.com/"
    },
    "happy_cricket": {
      "original": "play{t=[0,3,5,7,10,12]+40;p=Duty.ar(1/4,0,Drand((t+12++t).midicps,inf));Blip.ar([b=TRand.ar(1500,2e3,Impulse.ar(16)).lag,b+p],1).mean!2**2}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["cricket", "insect", "blip", "high", "random", "sequence"],
      "description": "High-pitched, cricket-like sounds based on random sequences.",
      "suggested_ndef_name": "happy_cricket",
      "source_url": "https://earslap.com/"
    },
    "high_morse_noise": {
      "original": "play{n=LFNoise0.kr(_);v=Blip.ar([2e4,2e4-9],1,n.(16)*0.5+0.5**9);42.do{v=LeakDC.ar(AllpassC.ar(v,1,n.(5)*5e-2+(5e-2+1e-3),100))};tanh(v*99)}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["high", "noise", "morse", "blip", "allpass", "feedback", "extreme"],
      "description": "Very high-frequency noise resembling Morse code, processed through many allpass filters.",
      "suggested_ndef_name": "high_morse_noise",
      "source_url": "https://earslap.com/"
    },
    "big_music_box": {
      "original": "play{Mix(HPF.ar(MidEQ.ar(Limiter.ar(GVerb.ar(HPF.ar(Pulse.ar([[0.1,0.11],[0.12,0.13]],0.6,5e-3),99),[[1,5/4],[1.5,2]],99)),9e3,0.9,9),200))}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["musicbox", "reverb", "filter", "pulse", "harmonic"],
      "description": "Simulates a large, reverberant music box sound.",
      "suggested_ndef_name": "big_music_box",
      "source_url": "https://earslap.com/"
    },
    "beat_synth_outbreaks": {
      "original": "play{i=Impulse.ar(_);SinOsc.ar(i.(2).lagud(0,0.4)*360,Integrator.ar(Integrator.ar(i.(64).lag(LFNoise1.ar(2!2,2,2))*99,0.9),0.99).fold2(pi))}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["beat", "synth", "outbreak", "impulse", "integrator", "phase"],
      "description": "Rhythmic synth outbreaks driven by impulses and phase modulation.",
      "suggested_ndef_name": "beat_synth_outbreaks",
      "source_url": "https://earslap.com/"
    },
    "chiptune_overtones": {
      "original": "play{Splay.ar(Integrator.ar(LFNoise0.ar(5!3,k=Duty.ar(6.4,0,Dseq([0.05,Drand([0.04,0.08],1)],inf))).round(k/10)).sin.sqrt.tanh,0.3)}//#sc...",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["chiptune", "overtones", "splay", "integrator", "noise", "duty"],
      "description": "Chiptune-like texture with evolving overtones.",
      "suggested_ndef_name": "chiptune_overtones",
      "source_url": "https://earslap.com/"
    },
    "glitch_marching": {
      "original": "play{LocalOut.ar(k=LeakDC.ar(Integrator.ar(Pulse.ar(pi/[1,2.57],[0.54,0.46]),(1-LocalIn.ar(2)).fold(0,[0.9,0.85])).wrap2(pi).sin));k.mean!2}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["glitch", "march", "rhythm", "feedback", "integrator", "pulse", "phase"],
      "description": "A glitchy, marching rhythm based on feedback and phase modulation.",
      "suggested_ndef_name": "glitch_marching",
      "source_url": "https://earslap.com/"
    },
    "synth_harmonics_outbreak": {
      "original": "{n=LFNoise0.ar(_);f=[60,61];tanh(BBandPass.ar(max(max(n.(4),l=n.(6)),SinOsc.ar(f*ceil(l*9).lag(0.1))*0.7),f,n.(1).abs/2)*700*l.lag(1))}.play",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["synth", "harmonics", "noise", "filter", "outbreak", "bandpass"],
      "description": "Synth sound with harmonic outbreaks controlled by noise.",
      "suggested_ndef_name": "synth_harmonics_outbreak",
      "source_url": "https://earslap.com/"
    },
    "crackling": {
      "original": "play{LocalOut.ar(k=tanh(500*(PinkNoise.ar(1!2)**(8/(LagUD.ar(y=LocalIn.ar(2).range(0, 0.9)+0.1,0,0.2))))));Splay.ar(k,1-y)}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["crackle", "noise", "feedback", "pinknoise", "splay"],
      "description": "Crackling noise texture controlled by feedback level.",
      "suggested_ndef_name": "crackling",
      "source_url": "https://earslap.com/"
    },
    "noisy_atonal": {
      "original": "play{i=Impulse.ar(8).lag(0.3)!2;10.do{i=LeakDC.ar(AllpassC.ar(i,1,LFNoise0.ar(8).range(1e-5,0.2),-0.15,LFNoise0.ar(8).range(1,3))).tanh};i}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["noise", "atonal", "feedback", "allpass", "impulse", "texture"],
      "description": "Dense, noisy, atonal texture built with iterated allpass filters.",
      "suggested_ndef_name": "noisy_atonal",
      "source_url": "https://earslap.com/"
    },
    "feedback_resonances": {
      "original": "play{n=LFNoise0.kr(*_);v=Blip.ar([60,61],5,n.(4)**8);12.do{v=LeakDC.ar(CombC.ar(v,1,n.([1,0.05,0.06]).lag(5e3),9))};Limiter.ar(v,0.9,1)}",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["feedback", "resonance", "comb", "blip", "noise", "limiter"],
      "description": "Resonant tones created by feeding Blip signals through comb filters.",
      "suggested_ndef_name": "feedback_resonances",
      "source_url": "https://earslap.com/"
    },
    "ultra_high_frequencies": {
      "original": "play{Blip.ar([16e3,16150],2,LFTri.ar(Duty.ar(LFNoise0.ar(0.2,4,6),0,Dseq([70,30,0],inf))).clip(0,1))}//#supercollider_summer",
      "author": "Batuhan Bozkurt (earslap)",
      "tags": ["high", "ultrasonic", "blip", "lftri", "sequence", "extreme"],
      "description": "Generates ultra-high frequencies using Blip and LFTri.",
      "suggested_ndef_name": "ultra_high_frequencies",
      "source_url": "https://earslap.com/"
    },
    "mysterious_atmo": {
      "original": "{a=PinkNoise.ar(1!2);50.do{a=BBandStop.ar(a,LFNoise1.kr(0.05.rand).exprange(40,15000),exprand(0.1,2))};LPF.ar(a,1e5)}.play// #supercollider",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["ambient", "atmo", "noise", "pinknoise", "filter", "bandstop", "texture"],
      "description": "Mysterious atmospheric texture created by filtering pink noise.",
      "suggested_ndef_name": "mysterious_atmo",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "trash_beat": {
      "original": "{a=LFTri.ar(1);20.do{a=BAllPass.ar(a,80,1);a=((a+0.02)*LFNoise0.kr(1/2)*8).tanh;a=LeakDC.ar(a,0.995)};a*0.1!2}.play// #supercollider",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["beat", "rhythm", "glitch", "trash", "feedback", "allpass", "noise"],
      "description": "A trashy, glitchy beat generated through feedback and allpass filters.",
      "suggested_ndef_name": "trash_beat",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "synth_accompaniment": {
      "original": "p={|f,a=1|LFPulse.ar(f)*a*[1,1.01]};{p.(p.(100-p.(1/16,20))+p.(2,1+p.(1/4))-0.5*200)+p.(100-p.(1/8,20),p.(8))*0.1}.play// #supercollider",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["synth", "accompaniment", "pulse", "rhythm", "pattern", "generative"],
      "description": "Synth accompaniment pattern using nested pulse functions.",
      "suggested_ndef_name": "synth_accompaniment",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "evolving_poppings": {
      "original": "{LocalOut.ar(a=CombN.ar(BPF.ar(LocalIn.ar(2)*7.5+Saw.ar([32,33],0.2),2**LFNoise0.kr(4/3,4)*300,0.1).distort,2,2,40));a}.play//#supercollider",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["feedback", "pops", "comb", "filter", "distortion", "evolving"],
      "description": "Evolving popping sounds using feedback, filtering, and distortion.",
      "suggested_ndef_name": "evolving_poppings",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "metallic_rhythms": {
      "original": "n={|r,f,n=0,d=1|2**LFNoise0.kr(1!d,r)*f};{p=n.(4,1e3);CombN.ar(Ringz.ar(LFPulse.ar(1,0,0.01),n.(2,p,80),0.6).sum,8/5,8/5,60)*4e-4!2}.play",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["metallic", "rhythm", "ringz", "comb", "noise", "generative"],
      "description": "Rhythmic metallic sounds generated with Ringz and Comb delays.",
      "suggested_ndef_name": "metallic_rhythms",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "harmonic_metallic_accompaniment": {
      "original": "n={|r,f,n=0,d=1|round(r**LFNoise0.ar([4,1,8,2]!d)*f,n)};play{Splay.ar(d=n.(3,0.6);Ringz.ar(d*0.01,n.(2,n.(20,400),40,20),d).mean.tanh)}",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["harmonic", "metallic", "accompaniment", "ringz", "splay", "noise", "generative"],
      "description": "Splayed harmonic metallic accompaniment using Ringz.",
      "suggested_ndef_name": "harmonic_metallic_accompaniment",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "walking_in_the_storm": {
      "original": "play{p=PinkNoise.ar(1!2);BRF.ar(p+Blip.ar(p+2,400),150,2,0.1)+LPF.ar(FreeVerb2.ar(*LPF.ar(p+0.2*Dust.ar(0.1),60)++[1,1,0.2,1e4]).tanh,2000)}",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["ambient", "storm", "noise", "pinknoise", "filter", "reverb", "texture"],
      "description": "Atmospheric sound suggesting walking in a storm, using filtered noise and reverb.",
      "suggested_ndef_name": "walking_in_the_storm",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "hunted_sounds": {
      "original": "Ndef('x',{x=(Ndef('x').ar*1.8).tanh;BPF.ar(x+[0.01,0.1],12**Latch.ar(x.mean,Impulse.ar(3)).lag(0.1)*200)})// tin whistle #supercollider",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["feedback", "filter", "bpf", "latch", "whistle", "creepy"],
      "description": "A hunted, whistle-like sound generated via feedback and filtering.",
      "suggested_ndef_name": "hunted_sounds",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "fork_on_guitar": {
      "original": "Ndef(\\,{LPF.ar(x=DelayN.ar(LeakDC.ar(Ndef(\\.ar,1-2e-6)*0.99,1,0.01)+Dust.ar(0.5!2);x+(Trig1.ar(x<(x.mean.lag(30)),4e-3)*0.05),800)}).play",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["feedback", "delay", "filter", "glitch", "trigger"],
      "description": "Sounds like a fork hitting guitar strings, using complex feedback.",
      "suggested_ndef_name": "fork_on_guitar",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "glitch_creatures": {
      "original": "play{b=LocalBuf(1e5,2).clear;x=BufRd.ar(2,b,Phasor.ar(0,1,0,1e5))*0.6;BufWr.ar(Blip.ar([1,1.01],10)/5+x,b,LFNoise1.ar(0.2)+1*5e4);x}// #sc",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["glitch", "buffer", "feedback", "bufwr", "bufrd", "blip", "creature"],
      "description": "Glitchy creature sounds using buffer read/write feedback.",
      "suggested_ndef_name": "glitch_creatures",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "glitch_machines": {
      "original": "play{b=LocalBuf(4e5,2).clear;BufCombL.ar(b,LeakDC.ar(BufRd.ar(2,b,LFNoise1.ar(0.25)+1*2e5)*0.98)+Blip.ar(2!2,10),2,20)/10}// #supercollider",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["glitch", "machine", "buffer", "comb", "bufcombl", "bufrd", "blip", "feedback"],
      "description": "Machine-like glitch sounds using buffered comb delays.",
      "suggested_ndef_name": "glitch_machines",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "blurry_major_sevenths": {
      "original": "play{b=LocalBuf(4e5,2).clear;BufCombL.ar(b,LeakDC.ar(LPF.ar(PlayBuf.ar(2,b,16/15,0,0,1),300))+Blip.ar([20,21],1),2,40)/20}// #supercollider",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["blurry", "major7", "harmonic", "buffer", "comb", "playbuf", "blip", "feedback"],
      "description": "Blurry major seventh harmonies created with buffer feedback.",
      "suggested_ndef_name": "blurry_major_sevenths",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "cascade_of_clips": {
      "original": "play{b=LocalBuf(2*SampleRate.ir,2);BufCombL.ar(b,LeakDC.ar(RLPF.ar(Limiter.ar(PlayBuf.ar(2,b,0.4,0,0,1),0.5)+Dust.ar(0.1),5e3,0.03)),1,10)}",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["cascade", "clip", "buffer", "comb", "playbuf", "limiter", "feedback", "noise"],
      "description": "Cascading clipped sounds using buffer feedback and limiting.",
      "suggested_ndef_name": "cascade_of_clips",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "evolving_chiptunes": {
      "original": "play{({|i|x=Dbufrd(b=LocalBuf(5).clear,i);x=x**x-LFNoise0.ar(1/(2**i),50).floor%16;Pulse.ar(Duty.ar(1/8,0,Dbufwr(x,b,i))*20)}!5).mean!2}",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["chiptune", "evolving", "buffer", "dbufrd", "dbufwr", "feedback", "pulse"],
      "description": "Evolving chiptune patterns generated via buffer feedback.",
      "suggested_ndef_name": "evolving_chiptunes",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "rhythmic_drops": {
      "original": "play{x=Splay.ar({|i|RLPF.ar(0.6**i*40*Impulse.ar(2**i/32,1/2),4**LFNoise0.kr(1/16)*300,5e-3).sin}!8);2.do{x=FreeVerb2.ar(*x++[0.1,1,1])};x}",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["rhythm", "drops", "percussive", "filter", "reverb", "impulse", "splay"],
      "description": "Rhythmic filtered drops with reverb.",
      "suggested_ndef_name": "rhythmic_drops",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "resonant_tunnel": {
      "original": "play{x=Saw.ar([50,50.1]);8.do{|i|f=2**(8-i);x=BRF.ar(AllpassN.ar(x,1,0.1/(12-i),2),80**TRand.ar(0,1,Impulse.ar(f/32,1/2)).lag(1/f)*80,2)};x}",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["resonant", "tunnel", "filter", "brf", "allpass", "feedback", "saw"],
      "description": "Creates a resonant tunnel effect by iterating filters.",
      "suggested_ndef_name": "resonant_tunnel",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "microtonal_ascending": {
      "original": "p=Impulse;play{mean({|i|Pluck.ar(LFSaw.ar([102,101]),x=p.ar(1,i/10)+p.ar(0),1,1/Latch.ar(1.015**Sweep.ar(0,1)*64%1+1*200,x),4,0.2)}!10)}",
      "author": "Nathaniel Virgo (headcube)",
      "tags": ["microtonal", "ascending", "pluck", "latch", "sweep", "generative"],
      "description": "Ascending microtonal plucks with complex pitch control.",
      "suggested_ndef_name": "microtonal_ascending",
      "source_url": "https://headcube.vootrunner.com/"
    },
    "scifi_intro": {
      "original": "play{GVerb.ar(({|k|({|i|x=Impulse.kr(0.5**i/k);y=SinOsc;y.ar(i,y.ar(i+k**i)/Decay.kr(x,[i,i+1],k))}!6).sum}!16).sum,1)/512}//#supercollider",
      "author": "Tim Walters",
      "tags": ["scifi", "intro", "ambient", "generative", "sine", "decay", "reverb"],
      "description": "Sci-fi intro sound using nested sine oscillators and reverb.",
      "suggested_ndef_name": "scifi_intro",
      "source_url": "http://doubtfulpalace.com/"
    },
    "glitch_outbursts": {
      "original": "play{({|k|({|i|y=SinOsc;y.ar(i*k*k,y.ar(i*k**i/[4,5])*Decay.kr(Dust.kr(1/4**i),y.ar(0.1)+1*k+i,k*999))}!8).product}!16).sum}//#supercollider",
      "author": "Tim Walters",
      "tags": ["glitch", "outburst", "generative", "sine", "decay", "dust", "complex"],
      "description": "Complex glitchy outbursts from nested generative structures.",
      "suggested_ndef_name": "glitch_outbursts",
      "source_url": "http://doubtfulpalace.com/"
    },
    "harmonic_drone1": {
      "original": "play{({|k|x={|f,m,j|SinOsc.ar(f+(m*4*j),m,LFNoise1.ar(j+1/f*4)/2)};y=x.(0.1,0,8);9.do({|i|y=x.(i*k*[4,8],y,i)});y}!8).sum/4}//#supercollider",
      "author": "Tim Walters",
      "tags": ["harmonic", "drone", "sine", "feedback", "generative", "complex"],
      "description": "Complex harmonic drone generated through nested functions.",
      "suggested_ndef_name": "harmonic_drone1",
      "source_url": "http://doubtfulpalace.com/"
    },
    "harmonic_drone2": {
      "original": "play{({|i|Blip.ar((i+2).sqrt/256,3,[-1,1].wrapAt(i))*Gendy1.ar(6,6,1,Blip.ar(i*i+1*[0.5,0.3],9),i+1*60,i+1*100)}!8).sum/4}//#supercollider",
      "author": "Tim Walters",
      "tags": ["harmonic", "drone", "blip", "gendy", "generative", "complex"],
      "description": "Another complex harmonic drone using Blip and Gendy.",
      "suggested_ndef_name": "harmonic_drone2",
      "source_url": "http://doubtfulpalace.com/"
    },
    "electricity": {
      "original": "/*eclecticity*/ Ndef(\\x, { SinOsc.ar(BrownNoise.ar(30!2, 200), Ndef(\\x).ar * LFNoise1.kr(1!2,1,1)) }).play;",
      "author": "Julian Rohrhuber",
      "tags": ["feedback", "noise", "sine", "brownnoise", "ndef", "electricity"],
      "description": "Crackling electricity sound using feedback Ndef.",
      "suggested_ndef_name": "electricity",
      "source_url": "http://wertlos.org/~rohrhuber/"
    },
    "chdegaulleabout": {
      "original": "{(SinOsc.ar(LFNoise1.kr(0.01).exprange(100,{exprand(300,10000)}!120)).mean)!2}.play;//chdegaulleabout",
      "author": "Julian Rohrhuber",
      "tags": ["ambient", "drone", "sine", "noise", "random", "cluster"],
      "description": "Ambient drone with slowly shifting high-frequency clusters.",
      "suggested_ndef_name": "chdegaulleabout",
      "source_url": "http://wertlos.org/~rohrhuber/"
    },
    "sine_stairs": {
      "original": "var f={rrand(0.2, 2.0)}; {Splay.ar(SinOsc.ar(SinOsc.ar(0.02 * (f!8)).sum.round(f!8) * (f!8+1) * 100)) * 0.1}.play;//stairs #supercollider",
      "author": "Julian Rohrhuber",
      "tags": ["sine", "stairs", "generative", "random", "splay", "quantized"],
      "description": "Stepped sine wave patterns based on random frequencies.",
      "suggested_ndef_name": "sine_stairs",
      "source_url": "http://wertlos.org/~rohrhuber/"
    },
    "noise_wind": {
      "original": "Ndef(\\x, { var r = SinOsc.ar(Ndef(\\x).ar, [0, pi]); Splay.ar(max(sin(r[0] * ({ exprand(1.0, 3000.0)}!8) + LFNoise1.kr(1!8)),0))*0.4 }).play;",
      "author": "Julian Rohrhuber",
      "tags": ["noise", "wind", "feedback", "sine", "random", "splay", "ndef"],
      "description": "Wind-like noise texture using feedback and random modulation.",
      "suggested_ndef_name": "noise_wind",
      "source_url": "http://wertlos.org/~rohrhuber/"
    },
    "nasty_engine": {
      "original": "Ndef(\\x, { ring1(SinOsc.ar(234*XLine.kr(0.1,1,5)+LFNoise2.kr(2!2, 5)),DelayC.ar(Ndef(\\x).ar.reverse,0.03,0.02+(Ndef(\\x).ar*0.001)))}).play;",
      "author": "Julian Rohrhuber",
      "tags": ["feedback", "delay", "ring", "sine", "noise", "engine", "ndef"],
      "description": "Nasty engine-like sound using feedback, delay, and ring modulation.",
      "suggested_ndef_name": "nasty_engine",
      "source_url": "http://wertlos.org/~rohrhuber/"
    },
    "snare_polyrhythms": {
      "original": "{{PinkNoise.ar*LFSaw.ar(0-Duty.kr(1,0, Dseq((2**(0,1..5) ++ [3,3]).scramble,inf)),1).range(0,1).squared.squared}.dup}.play// #supercollider",
      "author": "Dan Stowell",
      "tags": ["snare", "polyrhythm", "noise", "pinknoise", "duty", "sequence", "rhythm"],
      "description": "Polyrhythmic snare-like sounds using shaped pink noise.",
      "suggested_ndef_name": "snare_polyrhythms",
      "source_url": "http://www.mcld.co.uk/research/"
    },
    "rhythmic_wipes": {
      "original": "{t=HPZ1.kr(LFNoise0.kr(4));{Pulse.ar((t*10000+0.0001).lag(0, 0.1))}.dup+(SinOsc.ar([220, 330])*Integrator.kr(t))*0.1}.play;// #supercollider",
      "author": "Dan Stowell",
      "tags": ["rhythm", "wipe", "pulse", "noise", "integrator", "sine"],
      "description": "Rhythmic wiping sounds combining pulses and integrated noise.",
      "suggested_ndef_name": "rhythmic_wipes",
      "source_url": "http://www.mcld.co.uk/research/"
    },
    "rhythmic_sweeps": {
      "original": "i=LFPulse;k=[100,1];{i.ar(i.kr(5).lag(0.1).linexp(0,1,50,Duty.kr(0.1,0,Dseq([k,Dxrand(11.fib,28)],inf).midicps)))/9}.play;// #supercollider",
      "author": "Dan Stowell",
      "tags": ["rhythm", "sweep", "pulse", "lfpulse", "sequence", "fibonacci"],
      "description": "Rhythmic sweeping sounds controlled by nested LFPulse and sequences.",
      "suggested_ndef_name": "rhythmic_sweeps",
      "source_url": "http://www.mcld.co.uk/research/"
    },
    "noise_gradients": {
      "original": "i=SinOsc;x={exprand(0.1,0.01)};{Splay.ar({[PinkNoise,BrownNoise,GrayNoise].choose.ar*i.ar(i.ar(0.01).range(x,x))}!9)}.play// #supercollider",
      "author": "Dan Stowell",
      "tags": ["noise", "gradient", "texture", "splay", "random", "sine"],
      "description": "Splayed noise gradients using different noise colors and modulation.",
      "suggested_ndef_name": "noise_gradients",
      "source_url": "http://www.mcld.co.uk/research/"
    },
    "low_high_chip_melody": {
      "original": "{Pulse.ar(Duty.kr(0.1,0,Dseq(\"123456.....ginghamginghamgingham\".as(Array).pyramid.ascii.midicps/2, inf)),0.5,0.1)!2}.play",
      "author": "Dan Stowell",
      "tags": ["chiptune", "melody", "pulse", "duty", "sequence", "ascii"],
      "description": "Chiptune melody generated from ASCII character codes.",
      "suggested_ndef_name": "low_high_chip_melody",
      "source_url": "http://www.mcld.co.uk/research/"
    },
    "atonal_arpeggios": {
      "original": "{a=[0.02,0.1,1,2,3,4]; k=LFPar.kr(a+0.5).sum; f=Latch.kr(k,Impulse.kr(a)); Splay.ar(SinOsc.ar(f*100+300)/5)}.play // #supercollider",
      "author": "Dan Stowell",
      "tags": ["atonal", "arpeggio", "splay", "latch", "lfpar", "generative"],
      "description": "Splayed atonal arpeggios based on LFPar and Latch.",
      "suggested_ndef_name": "atonal_arpeggios",
      "source_url": "http://www.mcld.co.uk/research/"
    },
    "bass_riff_to_noise": {
      "original": "play{a=Duty.kr(0.1,0,Dseq(fib(32).wrap(20,55).midicps,inf));HPF.ar(LeakDC.ar(Splay.ar(LFCub.ar([-1,a,a/3,-2])))*9).clip2/9};//#supercollider",
      "author": "Dan Stowell",
      "tags": ["bass", "riff", "noise", "sequence", "fibonacci", "duty", "filter", "clip"],
      "description": "A bass riff derived from Fibonacci sequence that degrades into noise.",
      "suggested_ndef_name": "bass_riff_to_noise",
      "source_url": "http://www.mcld.co.uk/research/"
    },
    "aeolian_strings": {
      "original": "{Mix.fill(9,{i=Dust.ar(0.4)!2;CombC.ar(i,1,Select.ar(TIRand.kr(0,7,i),(55+Scale.aeolian.degrees).collect{|x|DC.ar(1/x.midicps)}),3)})}.play",
      "author": "Thor Magnusson",
      "tags": ["strings", "aeolian", "comb", "dust", "scale", "generative"],
      "description": "Simulates Aeolian strings using comb filters and dust.",
      "suggested_ndef_name": "aeolian_strings",
      "source_url": "https://thormagnusson.github.io/"
    },
    "arguing_oscs": {
      "original": "{var a=SinOsc, l=LFNoise2; a.ar(666*a.ar(l.ar(l.ar(0.5))*9)*RLPF.ar(Saw.ar(9),l.ar(0.5).range(9,999),l.ar(2))).cubed}!2.play",
      "author": "Thor Magnusson",
      "tags": ["oscillator", "fm", "noise", "filter", "harsh", "complex"],
      "description": "Harsh, complex sound like arguing oscillators using FM and filtering.",
      "suggested_ndef_name": "arguing_oscs",
      "source_url": "https://thormagnusson.github.io/"
    },
    "bon_fire_night": {
      "original": "{var x=Decay, d=Dust.ar(4); FreeVerb.ar(LPF.ar(x.ar(d,0.5,WhiteNoise.ar),2000)+x.ar(d,0.15,SinOsc.ar([40,47],pi,5)),0.4,0.6,TRand.ar(0,1,d))}.play",
      "author": "Thor Magnusson",
      "tags": ["ambient", "fire", "crackle", "noise", "decay", "reverb", "random"],
      "description": "Atmospheric sound evoking a bonfire night with crackles and low tones.",
      "suggested_ndef_name": "bon_fire_night",
      "source_url": "https://thormagnusson.github.io/"
    },
    "drunk_drummer": {
      "original": "{var i=Dust.ar(4),a=0.5,b=5e-3,q=Decay2,p=PulseDivider,n=WhiteNoise.ar;(SinOsc.ar(80)*q.ar(p.ar(i,2),a,b)+(n*q.ar(p.ar(i,4),b,a)))!2}.play",
      "author": "Thor Magnusson",
      "tags": ["drum", "beat", "rhythm", "drunk", "noise", "decay", "pulsedivider"],
      "description": "A simple, somewhat unstable drum beat.",
      "suggested_ndef_name": "drunk_drummer",
      "source_url": "https://thormagnusson.github.io/"
    },
    "for_eliane_radigue1": {
      "original": "{{({|i|var x=i+1;SinOsc.ar(30*x+LFNoise2.ar(0.1).range(-2,2),0,LFNoise2.ar(0.5)*(Line.ar(0,0.1,99.rand)/(x*0.2)))}!rrand(9,28)).sum}!2}.play",
      "author": "Thor Magnusson",
      "tags": ["drone", "ambient", "sine", "noise", "slow", "generative"],
      "description": "Slowly evolving drone inspired by Eliane Radigue.",
      "suggested_ndef_name": "for_eliane_radigue1",
      "source_url": "https://thormagnusson.github.io/"
    },
    "european_music_study": {
      "original": "{var a=Saw,b=220,c=0.3;LPF.ar(a.ar(b,c)+a.ar(LFNoise2.ar(1).range(1.1892,1.2599)*b,c)+a.ar(b*1.5,c),5e3)!2}.play",
      "author": "Thor Magnusson",
      "tags": ["harmonic", "study", "saw", "filter", "tuning", "interval"],
      "description": "Study in intervals using detuned saw waves.",
      "suggested_ndef_name": "european_music_study",
      "source_url": "https://thormagnusson.github.io/"
    },
    "frequency_stacking1": {
      "original": "{{{|i|SinOsc.ar(20+(i*9),0,SinOsc.ar(2.2.rand).range(0.001,0.1))}.sum(200)}!2}.play",
      "author": "Thor Magnusson",
      "tags": ["drone", "cluster", "sine", "stacking", "dense", "harmonic"],
      "description": "Dense drone created by stacking many sine waves.",
      "suggested_ndef_name": "frequency_stacking1",
      "source_url": "https://thormagnusson.github.io/"
    },
    "frequency_stacking3": {
      "original": "{{{|i|SinOsc.ar(20+(i*LFNoise2.ar(1).range(3,10)),pi.rand,SinOsc.ar(2.2.rand).range(0.001,0.1))}.sum(200)}!2}.play",
      "author": "Thor Magnusson",
      "tags": ["drone", "cluster", "sine", "stacking", "dense", "noise", "random"],
      "description": "Dense drone with more random frequency stacking.",
      "suggested_ndef_name": "frequency_stacking3",
      "source_url": "https://thormagnusson.github.io/"
    },
    "lynch": {
      "original": "{var b=Buffer.read(s,Platform.resourceDir +/+ \"sounds/a11wlk01.wav\"),p=Dust.kr(99),r=TRand,o=Warp1.ar(1,b,r.kr(0,4e4,p),r.kr(0.5,1,p),1)*Linen.kr(p,1);GVerb.ar(o)}.play",
      "author": "Thor Magnusson",
      "tags": ["buffer", "granular", "warp", "random", "reverb", "ambient"],
      "description": "Granular processing of a buffer creating a Lynchian atmosphere.",
      "suggested_ndef_name": "lynch",
      "source_url": "https://thormagnusson.github.io/"
    },
    "for_eliane_radigue2": {
      "original": "{{({|i|var x=i+1,y=LFNoise2.ar(0.1),f=77*(x/2)+y.range(-2,2);LPF.ar(Saw.ar(f,y*(Line.ar(0,0.2,99.rand)/(x*0.3))),f*3)}!rrand(9,28)).sum}!2}.play",
      "author": "Thor Magnusson",
      "tags": ["drone", "ambient", "saw", "filter", "slow", "generative"],
      "description": "Another slowly evolving drone inspired by Eliane Radigue, using saw waves.",
      "suggested_ndef_name": "for_eliane_radigue2",
      "source_url": "https://thormagnusson.github.io/"
    },
    "rock_manual": {
      "original": "{var w=WhiteNoise.ar+SinOsc.ar(80,pi/2);(LPF.ar(w,4e3)*Pulse.ar(XLine.ar(14,0.12,6)))+(EnvGen.ar(Env.new([0,0,1,0],[7,0,2]),1,1,0,1,2)*w)!2}.play",
      "author": "Thor Magnusson",
      "tags": ["rock", "beat", "noise", "pulse", "filter", "envelope"],
      "description": "A noisy, pulsed sound perhaps suggesting a rock beat.",
      "suggested_ndef_name": "rock_manual",
      "source_url": "https://thormagnusson.github.io/"
    },
    "rosetta_comet": {
      "original": "{var l=LFNoise2,o=0.3;FreeVerb.ar(LPF.ar(SinOsc.ar(l.ar(o).range(666,1e3))*Saw.ar(17),300),l.ar(o))!2}.play",
      "author": "Thor Magnusson",
      "tags": ["ambient", "space", "comet", "noise", "filter", "reverb", "sine", "saw"],
      "description": "Spacey ambient sound, possibly evoking a comet.",
      "suggested_ndef_name": "rosetta_comet",
      "source_url": "https://thormagnusson.github.io/"
    },
    "sleep": {
      "original": "{var a=SinOsc.ar(0.15).clip(0,0.3);(Decay2.ar(LFSaw.ar(13)*a, 0.1)+DelayC.ar(RLPF.ar(PinkNoise.ar(0.3)*a,2300,0.1),3,3))!2}.play",
      "author": "Thor Magnusson",
      "tags": ["ambient", "sleep", "gentle", "noise", "filter", "decay", "delay"],
      "description": "Gentle ambient sound suitable for sleep.",
      "suggested_ndef_name": "sleep",
      "source_url": "https://thormagnusson.github.io/"
    },
    "that_nightclub_downstairs": {
      "original": "{x=SinOsc;y=LFNoise0;a=y.ar(8);(x.ar(Pulse.ar(1)*24)+x.ar(90+(a*90))+MoogFF.ar(Saw.ar(y.ar(4,333,666)),a*XLine.ar(1,39,99,99,0,2)))!2}.play",
      "author": "Thor Magnusson",
      "tags": ["beat", "bass", "club", "noise", "filter", "pulse", "saw", "moog"],
      "description": "Simulates the muffled sound of a nightclub downstairs.",
      "suggested_ndef_name": "that_nightclub_downstairs",
      "source_url": "https://thormagnusson.github.io/"
    },
    "timpanis": {
      "original": "{{var x=LFNoise0.ar(1)>0;SinOsc.ar(Spring.ar(x,4,3e-05)*(70.rand+190)+LFNoise2.ar(1).range(90,120))*EnvGen.kr(Env.perc(0.001,5),x)}!2}.play",
      "author": "Thor Magnusson",
      "tags": ["timpani", "drum", "percussion", "spring", "noise", "envelope", "random"],
      "description": "Simulated timpani hits using noise, spring resonance, and envelopes.",
      "suggested_ndef_name": "timpanis",
      "source_url": "https://thormagnusson.github.io/"
    },
    "txalaparta": {
      "original": "{(|x|SOS.ar(TBall.ar(Impulse.ar(1,x*0.1*x),0.8,0.2,0.02)*20,0.6,0,0,rrand(1.9975, 1.985),-0.9988)}!6).sum!2.play",
      "author": "Thor Magnusson",
      "tags": ["txalaparta", "percussion", "wood", "tball", "sos", "filter", "random"],
      "description": "Simulation of the Txalaparta percussion instrument.",
      "suggested_ndef_name": "txalaparta",
      "source_url": "https://thormagnusson.github.io/"
    },
    "entropic_saw": {
      "original": "{var n=99;{{|x|x=x+1;SinOsc.ar(x*n+(LFNoise2.ar(0.1)*x*LFTri.ar(1/n,0,n,1)),0,0.5/x)}.dup(n).sum}!2}.play",
      "author": "Thor Magnusson",
      "tags": ["saw", "drone", "entropic", "dense", "sine", "noise", "complex"],
      "description": "Dense, complex saw-like drone created by summing many modulated sines.",
      "suggested_ndef_name": "entropic_saw",
      "source_url": "https://thormagnusson.github.io/"
    },
    "sine_clusters": {
      "original": "{Splay.ar(SinOsc.ar(Array.fill(100,{\\freq.asSpec.map(LFNoise2.kr(0.001))})))}.play // #supercollider",
      "author": "Jason Dixon (mutantsounds)",
      "tags": ["sine", "cluster", "drone", "ambient", "noise", "splay", "slow"],
      "description": "Slowly evolving sine wave clusters.",
      "suggested_ndef_name": "sine_clusters",
      "source_url": "https://www.mutantsounds.com/"
    },
    "low_drone": {
      "original": "{x=Array.fill(3,{Array.fill(50,{[40,150].asSpec.map(LFNoise2.kr(0.01))})});Splay.ar(SinOsc.ar(x[0]+SinOsc.ar(x[1],0,x[2]-39)))}.play",
      "author": "Jason Dixon (mutantsounds)",
      "tags": ["low", "drone", "ambient", "sine", "noise", "splay", "complex"],
      "description": "Complex low drone created with nested arrays of modulated sines.",
      "suggested_ndef_name": "low_drone",
      "source_url": "https://www.mutantsounds.com/"
    },
    "metallic_high_hits": {
      "original": "{f=[50,55,5000,10000];Splay.ar(Array.fill(4,{|i|Ringz.ar(RLPF.ar(Dust.ar(0.1),f[i],0.5),f[i],3)}))}.play //#supercollider",
      "author": "Jason Dixon (mutantsounds)",
      "tags": ["metallic", "high", "hits", "percussive", "ringz", "filter", "noise", "splay"],
      "description": "Splayed high metallic hits using Ringz filters.",
      "suggested_ndef_name": "metallic_high_hits",
      "source_url": "https://www.mutantsounds.com/"
    },
    "noisy_computer_sounds": {
      "original": "play{a=LFNoise0;b=FBSineC.ar(a.kr(4,2e4,2e4),a.kr(10,16,17),1,1.005,0.7)!2;Latch.ar(b,Impulse.ar(a.kr(0.5,5e3,4e3)))*a.kr(5,0.4,0.5)}// #sc",
      "author": "Juan A. Romero (rukano)",
      "tags": ["noise", "computer", "fbsinec", "latch", "feedback", "experimental"],
      "description": "Noisy computer-like sounds using feedback sine carrier.",
      "suggested_ndef_name": "noisy_computer_sounds",
      "source_url": "https://github.com/rukano"
    },
    "dubstep_bass": {
      "original": "play{RLPF.ar(Latch.ar(SinOsc.ar([100,100.5])!2,Impulse.ar(Duty.kr(Dseq([2,1]/4,inf),0,Drand((67,67.2..70),inf)))),800)} // #sc _dubsteppy_",
      "author": "Juan A. Romero (rukano)",
      "tags": ["dubstep", "bass", "wobble", "filter", "latch", "sequence", "sine"],
      "description": "A simple dubstep-style bass wobble.",
      "suggested_ndef_name": "dubstep_bass",
      "source_url": "https://github.com/rukano"
    },
    "noise_hail": {
      "original": "play{CombN.ar(Splay.ar(Pulse.ar(Gendy3.kr([1,2,4,6])+LFNoise0.ar(4,6,Gendy3.kr(5,freq:[10,99])))*Gendy2.ar([0,1],maxfreq:[55,99])),3,0.4,2)}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["noise", "hail", "comb", "splay", "pulse", "gendy", "generative"],
      "description": "Sounds like hail hitting a surface, using Gendy and comb delay.",
      "suggested_ndef_name": "noise_hail",
      "source_url": "https://github.com/rukano"
    },
    "noisy_meowing": {
      "original": "play{x=LFDNoise3;Blip.ar(x.kr(1,[400,100],500),x.kr([1,2],6,5))*Gendy3.ar(1,1,1,1,x.kr(1,99,91),1,0.1)*x.ar(0.5,0.5,0.5)}// #sc",
      "author": "Juan A. Romero (rukano)",
      "tags": ["noise", "meow", "cat", "blip", "gendy", "weird", "animal"],
      "description": "Noisy sounds reminiscent of a cat meowing.",
      "suggested_ndef_name": "noisy_meowing",
      "source_url": "https://github.com/rukano"
    },
    "synth_lead": {
      "original": "play{a=[1,1.01,2,2.02,3.5,4.01,5.501];SinOsc.ar(Duty.kr(0.2,0,Dseq([10,11,0,12.2,0,0,10,0]+39,inf).midicps)*(a++(a*2))).sum!2/2}//DAF #sc",
      "author": "Juan A. Romero (rukano)",
      "tags": ["synth", "lead", "sequence", "sine", "duty", "harmonic"],
      "description": "A synth lead sound with sequenced pitches and harmonic multipliers.",
      "suggested_ndef_name": "synth_lead",
      "source_url": "https://github.com/rukano"
    },
    "synth_lead2": {
      "original": "play{SinOsc.ar(Duty.kr(0.2,0,Dseq([0,5,0,15,0,12,0,0,12,0,12,0,12,10,0,12]+47,inf).midicps)*[1,1.01,2,2.02,3.5,4.01,5.501]).sum!2}// DAF #sc",
      "author": "Juan A. Romero (rukano)",
      "tags": ["synth", "lead", "sequence", "sine", "duty", "harmonic"],
      "description": "Another synth lead sound with a different sequence.",
      "suggested_ndef_name": "synth_lead2",
      "source_url": "https://github.com/rukano"
    },
    "s_o_s": {
      "original": "play{var cpm=60;SinOsc.ar(700)!2*ToggleFF.ar(TDuty.ar(Dseq([1,1,1,1,1,2, 2,1,2,1,2,2, 1,1,1,1,1,3]/1e3*(6e3/cpm),inf)))} // S.O.S @ #sc",
      "author": "Juan A. Romero (rukano)",
      "tags": ["sos", "morse", "rhythm", "sequence", "sine", "toggleff", "tduty"],
      "description": "Generates the S.O.S Morse code rhythm.",
      "suggested_ndef_name": "s_o_s",
      "source_url": "https://github.com/rukano"
    },
    "noise_metal": {
      "original": "play{SinOsc.ar(Latch.ar(SinOsc.ar(1.75,0,1e2,2e2),Impulse.ar((1,1.1..2)*2)).lag(0.1)/2*(1,1.25..8)).sum**3!2}// #supercollider (last one)",
      "author": "Juan A. Romero (rukano)",
      "tags": ["noise", "metal", "harsh", "sine", "latch", "feedback", "distortion"],
      "description": "A harsh, metallic noise sound using nested sines and latching.",
      "suggested_ndef_name": "noise_metal",
      "source_url": "https://github.com/rukano"
    },
    "rough_synth": {
      "original": "play{ SinOsc.ar(Latch.ar(SinOsc.ar(1.75,0,1e2,2e2),Impulse.ar([1,1.0001])).lag(0.1)*(1,1.25..8)).sum**3!2 } // #supercollider",
      "author": "Juan A. Romero (rukano)",
      "tags": ["rough", "synth", "sine", "latch", "feedback", "distortion"],
      "description": "Rough synth texture using nested sines and feedback.",
      "suggested_ndef_name": "rough_synth",
      "source_url": "https://github.com/rukano"
    },
    "sine_melody": {
      "original": "play{SinOsc.ar(Latch.ar(SinOsc.ar(1.3,0,4e2,5e2),Impulse.ar([1,1.0001])).lag(0.05))} // #supercollider /* simple but hypnotizing */",
      "author": "Juan A. Romero (rukano)",
      "tags": ["sine", "melody", "latch", "hypnotic", "simple"],
      "description": "Simple but hypnotic sine wave melody.",
      "suggested_ndef_name": "sine_melody",
      "source_url": "https://github.com/rukano"
    },
    "noisy_wind_storm": {
      "original": "play{x=LFNoise2.kr(22,5,9);CombC.ar(Splay.ar(Gendy3.ar([4,2],[0.5,1],[1/9,1/4]*x,[1/2,1/8]*x,(9,49..199))),5,[0.13,0.1],[x/2,x/2.1])} // #sc",
      "author": "Juan A. Romero (rukano)",
      "tags": ["noise", "wind", "storm", "comb", "gendy", "splay", "generative", "complex"],
      "description": "Complex noisy wind storm sound using Gendy and comb filters.",
      "suggested_ndef_name": "noisy_wind_storm",
      "source_url": "https://github.com/rukano"
    },
    "computer_scifi": {
      "original": "{x=TRand.kr(30,XLine.kr(2e4,30,99,1,1,2),Impulse.kr((1..9))).cpsmidi.round.midicps;Splay.ar(SinOsc.ar(x))*AmpComp.kr(x,10)}.play // #sc",
      "author": "Juan A. Romero (rukano)",
      "tags": ["computer", "scifi", "sine", "splay", "random", "sequence", "ampcomp"],
      "description": "Sci-fi computer sounds with random pitches.",
      "suggested_ndef_name": "computer_scifi",
      "source_url": "https://github.com/rukano"
    },
    "sine_walk_gliss": {
      "original": "fork{loop{d=rrand(1,9);play{f=200.rand+60;Splay.ar(SinOsc.ar(XLine.kr(f,(f,f+1..f+f),d,1,0,2),0,0.1))};d.wait}}//#sc #supercollider !!!NOT SAFE!!!",
      "author": "Juan A. Romero (rukano)",
      "tags": ["sine", "glissando", "walk", "generative", "random", "splay", "fork", "unsafe"],
      "description": "Generative sine wave glissandi. Potentially CPU intensive/unsafe.",
      "suggested_ndef_name": "sine_walk_gliss",
      "source_url": "https://github.com/rukano"
    },
    "ascending_crackings": {
      "original": "play{RLPF.ar(Demand.ar(Impulse.ar(20000),0,Dxrand([Dseq((1,0.005..0)),Dseq([1]++(0!555)),Dseq((0!999))],inf)),Line.kr(100,3000,80),0.1)!2}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["crackle", "ascending", "filter", "noise", "demand", "sequence"],
      "description": "Ascending crackling sounds created with filtered Demand stream.",
      "suggested_ndef_name": "ascending_crackings",
      "source_url": "https://github.com/rukano"
    },
    "tonal_scales": {
      "original": "play{SinOsc.ar(Latch.ar(LFSaw.ar(0.3,1,100,300).cpsmidi.round.midicps*[1,2],Impulse.ar(4)))} // tonal scales #supercollider",
      "author": "Juan A. Romero (rukano)",
      "tags": ["tonal", "scale", "sine", "latch", "lfsaw", "quantized"],
      "description": "Plays simple tonal scales using Latch and rounding.",
      "suggested_ndef_name": "tonal_scales",
      "source_url": "https://github.com/rukano"
    },
    "accelerated_barrel_hits": {
      "original": "play{a=(1,0.97..0.005);GVerb.ar(Decay2.ar(TDuty.ar(Dseq(a++(a/2)++(a/4)++(a/8))),XLine.kr(0.05,0.001,15),0.1,0.05)*9,4,1)}//#supercollider",
      "author": "Juan A. Romero (rukano)",
      "tags": ["percussive", "barrel", "hit", "accelerating", "decay", "reverb", "sequence"],
      "description": "Percussive hits that accelerate, simulating a barrel rolling faster.",
      "suggested_ndef_name": "accelerated_barrel_hits",
      "source_url": "https://github.com/rukano"
    },
    "hihat_rhythmic_pattern": {
      "original": "play{t=TDuty.kr(Dseq([1,1,4,2,2]/8,inf));Resonz.ar(Crackle.ar!2,Demand.kr(t,0,Dseq([250,8e3],inf)),Demand.kr(t,0,Dwhite(0.01,0.5,inf)))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["hihat", "rhythm", "pattern", "noise", "crackle", "filter", "resonator", "sequence"],
      "description": "Rhythmic hi-hat pattern using filtered crackle noise.",
      "suggested_ndef_name": "hihat_rhythmic_pattern",
      "source_url": "https://github.com/rukano"
    },
    "random_sine_harmonics": {
      "original": "play{t=Impulse.ar((1,1.3..4)/2).sum;Decay2.ar(t,0.05,0.2,Splay.ar(SinOsc.ar(Demand.ar(t,0,Drand((120,180..800),inf)))*ToggleFF.ar(t)))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["sine", "harmonic", "random", "splay", "decay", "impulse", "generative"],
      "description": "Splayed sine tones with random harmonics and decaying envelopes.",
      "suggested_ndef_name": "random_sine_harmonics",
      "source_url": "https://github.com/rukano"
    },
    "ragged_sines": {
      "original": "play{SinOsc.ar(Latch.ar(SinOsc.kr(0.75).range(0,12).round.midiratio*[200,400*SinOsc.kr(0.01).range(1,4)],TDuty.kr(Dseq([1,2]/8,inf))))} //ye",
      "author": "Juan A. Romero (rukano)",
      "tags": ["sine", "ragged", "latch", "sequence", "quantized", "generative"],
      "description": "Ragged sine wave melody based on latched sequences.",
      "suggested_ndef_name": "ragged_sines",
      "source_url": "https://github.com/rukano"
    },
    "sine_glissandos": {
      "original": "f=_.speak;fork{loop{f.(\"hi scott\");2.wait;Speech.channels[0].voice_(20.rand)}} // #sc #supercollider // now with tag",
      "author": "Juan A. Romero (rukano)",
      "tags": ["speech", "generative", "fork", "random", "unsafe"],
      "description": "Uses Speech UGen to say 'hi scott' repeatedly with random voices. Needs Speech UGens installed.",
      "suggested_ndef_name": "sine_glissandos",
      "source_url": "https://github.com/rukano"
    },
    "rhythmic_drops_rukano": {
      "original": "play{var l=LocalIn.ar+Decay2.ar(Impulse.ar(3),3e-2,0.05,LFCub.kr(LFNoise2.kr(19,500,600)));l=DelayN.ar(l,1,1/2);LocalOut.ar(l/3);l!2}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["rhythm", "drops", "feedback", "delay", "decay", "percussive"],
      "description": "Rhythmic percussive drops using feedback and delay.",
      "suggested_ndef_name": "rhythmic_drops_rukano",
      "source_url": "https://github.com/rukano"
    },
    "chiptune_accompaniment": {
      "original": "play{Splay.ar(Logistic.ar(LFCub.kr([1,2,4,8],0,1.9,2),LFNoise0.kr(1/[16,12,8,4],400,999).round(150)))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["chiptune", "accompaniment", "logistic", "noise", "splay", "generative"],
      "description": "Chiptune-style accompaniment using Logistic chaos.",
      "suggested_ndef_name": "chiptune_accompaniment",
      "source_url": "https://github.com/rukano"
    },
    "chiptune_interlude": {
      "original": "play{Splay.ar(Logistic.ar(LFCub.kr([1,2,4,6],0,1.5,2),LFNoise0.kr(1/[2,2,4,4],250,300).round(50))).lag(LFCub.kr(1/8,0.001,0.003))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["chiptune", "interlude", "logistic", "noise", "splay", "generative", "lag"],
      "description": "Lagged chiptune-style interlude using Logistic chaos.",
      "suggested_ndef_name": "chiptune_interlude",
      "source_url": "https://github.com/rukano"
    },
    "saw_galore": {
      "original": "play{l=LFSaw;l.ar(l.kr(l.kr([1,3],0,4,[5,6]),l.kr(1/[4,8]),l.kr(1,0,99,100),l.kr(1/2,0,50,l.kr(1/4,1/3,50,100))))/2}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["saw", "lfsaw", "complex", "modulation", "chaos"],
      "description": "Complex sound generated by deeply nested LFSaw modulation.",
      "suggested_ndef_name": "saw_galore",
      "source_url": "https://github.com/rukano"
    },
    "triangle_galore": {
      "original": "play{l=LFTri;l.ar(l.kr(1/4,1/1.5,l.kr(1,0,10,10),{|i|50+i}!8+l.kr(1/3,0,3,40)),0,l.kr((1..8),0,0.2).excess(0.01)*({|i|16-i/20}!16)).sum!2}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["triangle", "lftri", "complex", "modulation", "chaos", "additive"],
      "description": "Complex additive sound generated by deeply nested LFTri modulation.",
      "suggested_ndef_name": "triangle_galore",
      "source_url": "https://github.com/rukano"
    },
    "synth_calling": {
      "original": "play{o=LFCub.kr(1/[4,7,13,19]);PitchShift.ar(LFPar.ar(o@0*1e3+1e3,0,0.1).lag(1/1000),o@3*0.299+0.3,o@2*2+2,o@1,o[0]*0.1+0.1)!2}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["synth", "call", "pitchshift", "lfpar", "lfcub", "complex", "modulation"],
      "description": "Synth call sound using PitchShift modulated by LFCub/LFPar.",
      "suggested_ndef_name": "synth_calling",
      "source_url": "https://github.com/rukano"
    },
    "kalimba_polyrhythm": {
      "original": "play{e=ExpRand;Splay.ar(Decay2.ar(Impulse.ar({e.new(1,8).round/3}!9),5e-3,{e.new(0.1,1)}!9,LFCub.ar({e.new(66,666).round(20)}!9)))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["kalimba", "polyrhythm", "percussive", "decay", "random", "splay", "impulse"],
      "description": "Polyrhythmic pattern resembling a kalimba.",
      "suggested_ndef_name": "kalimba_polyrhythm",
      "source_url": "https://github.com/rukano"
    },
    "beat_gaida": {
      "original": "play{a=Decay2.ar(Impulse.ar(2),1e-4)*SinOsc.ar(40);Compander.ar(Blip.ar([40,40.5]*TChoose.kr(a>0.6,(1..8)),4),a,8e-3,1,0.001,0.1,1/3)+a}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["beat", "gaida", "blip", "compander", "decay", "random"],
      "description": "Rhythmic sound reminiscent of a Gaida bagpipe, using Blip and Compander.",
      "suggested_ndef_name": "beat_gaida",
      "source_url": "https://github.com/rukano"
    },
    "glitch_rhythmic_machine": {
      "original": "play{l=LFNoise2;RLPF.ar(Crackle.ar,SpecPcile.kr(FFT(LocalBuf(1024),LFGauss.ar(1/[6,8,20].choose,0.01)),0.5),l.kr(1/8,0.1,0.15),2).fold2!2}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["glitch", "rhythm", "machine", "noise", "crackle", "fft", "filter", "fold"],
      "description": "Glitchy rhythmic machine sounds using FFT analysis and Crackle.",
      "suggested_ndef_name": "glitch_rhythmic_machine",
      "source_url": "https://github.com/rukano"
    },
    "random_melody": {
      "original": "play{r=LFNoise0.kr(1/4,6,6).round.midiratio;Splay.ar({ToggleFF.ar(Dust.ar(8.rand+1)).lag(1/99)*SinOsc.ar((50,100..800).choose*r)}!40)}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["random", "melody", "generative", "splay", "sine", "noise", "toggleff"],
      "description": "Generates a random melodic texture using splayed sine waves.",
      "suggested_ndef_name": "random_melody",
      "source_url": "https://github.com/rukano"
    },
    "groove_melody": {
      "original": "play{p=TDuty.kr(Dshuf([4,2,1]/8,inf));c=TChoose;Pan2.ar(SinOscFB.ar(c.kr(p,(50,75..300)),Decay2.kr(p)+0.8),c.kr(p,[-0.5,0,0.5]).lag)}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["groove", "melody", "sequence", "sinefb", "tduty", "tchoose", "pan"],
      "description": "A simple groovy melody with panning.",
      "suggested_ndef_name": "groove_melody",
      "source_url": "https://github.com/rukano"
    },
    "harmonic_drone": {
      "original": "play{l=LFNoise2;FreeVerb2.ar(*XFade2.ar(SinOscFB.ar([80,81],l.kr(1)+1/2),SinOscFB.ar([121,160],l.kr(1)+1/2),l.kr(1)))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["harmonic", "drone", "sinefb", "reverb", "xfade", "noise", "ambient"],
      "description": "Harmonic drone created by crossfading feedback sine oscillators.",
      "suggested_ndef_name": "harmonic_drone",
      "source_url": "https://github.com/rukano"
    },
    "major_rhythmic_ostinato": {
      "original": "play{f=LFPar.kr(0.22,0,100,150).round(50).lag;Gendy2.ar(6,6,0.5,0.01,f,f+[1,2],1/2,1/2,19,f/4)*SetResetFF.ar(Impulse.ar(4),Dust.ar(4)).lag}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["major", "rhythm", "ostinato", "gendy", "lfpar", "setresetff"],
      "description": "A rhythmic ostinato in a major key using Gendy2.",
      "suggested_ndef_name": "major_rhythmic_ostinato",
      "source_url": "https://github.com/rukano"
    },
    "augmented_major": {
      "original": "play{i=Impulse;a=Splay.ar((PulseCount.ar(i.ar((1..8)),i.ar(1/3))>4)*Blip.ar((40,44..62).midicps,2));a*0.1+GVerb.ar(HPF.ar(a,4e3),300,14).flop.sum*4;}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["augmented", "major", "blip", "reverb", "pulsecount", "splay", "harmonic"],
      "description": "Augmented major chord sound with reverb.",
      "suggested_ndef_name": "augmented_major",
      "source_url": "https://github.com/rukano"
    },
    "fluctuating_sines": {
      "original": "play{GVerb.ar(Mix(9.collect{SetResetFF.ar(Dust.ar(8.rand+1),Dust.ar(8.rand+1)).lag*SinOsc.ar(LFNoise2.kr(0.1,25,exprand(40,1500)))/9}))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["fluctuating", "sine", "ambient", "reverb", "noise", "generative", "setresetff"],
      "description": "Fluctuating sine waves creating an ambient texture with reverb.",
      "suggested_ndef_name": "fluctuating_sines",
      "source_url": "https://github.com/rukano"
    },
    "racing_motors": {
      "original": "play{a=0;6.do{x=Sweep.ar(Dust2.kr(0.1+2.0.rand),9.rand+9)+LFNoise1.kr(0.1,60,80);a=a+Pan2.ar(Gendy1.ar(1,1,1,1,x,x+9),LFNoise2.kr(1))};a}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["motor", "racing", "engine", "gendy", "sweep", "noise", "pan", "random"],
      "description": "Sound of multiple racing motors using Gendy1 and panning.",
      "suggested_ndef_name": "racing_motors",
      "source_url": "https://github.com/rukano"
    },
    "rhythmic_harmonics": {
      "original": "play{Splay.ar(SinOsc.ar(LastValue.kr(LFNoise0.kr(3!4,250,220),200).round(50)*LFPar.kr((1..4)/8,0,{0.02.rand}!4,1),0,1/2))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["rhythm", "harmonic", "splay", "sine", "noise", "lastvalue", "lfpar"],
      "description": "Rhythmic harmonics using splayed sine waves controlled by noise.",
      "suggested_ndef_name": "rhythmic_harmonics",
      "source_url": "https://github.com/rukano"
    },
    "alien_spaceship": {
      "original": "play{a=Blip.ar(60,4,LFGauss.ar(4,1/8));a=a/4+LocalIn.ar(2);a=FreqShift.ar(a,LFNoise0.kr(1/4,90));LocalOut.ar(DelayC.ar(a,1,0.1,0.9));a}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["alien", "spaceship", "scifi", "blip", "freqshift", "delay", "feedback"],
      "description": "Alien spaceship sound using Blip, frequency shifting, and feedback delay.",
      "suggested_ndef_name": "alien_spaceship",
      "source_url": "https://github.com/rukano"
    },
    "minimal_beat": {
      "original": "play{l=LocalIn.ar(2)+Decay.ar(CoinGate.ar(0.3,Impulse.ar(8)));l=BPF.ar(l,99,2);LocalOut.ar(DelayN.ar(l,1,LFPulse.kr(1/4,1/4,1/2)));l}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["minimal", "beat", "rhythm", "feedback", "decay", "coingate", "delay", "filter"],
      "description": "Minimal beat using feedback, random triggers, and delay.",
      "suggested_ndef_name": "minimal_beat",
      "source_url": "https://github.com/rukano"
    },
    "wind_on_mic": {
      "original": "play{LeakDC.ar(CompanderD.ar(LPF.ar(Normalizer.ar(CompanderD.ar(BrownNoise.ar!2,0.1,0.1,4)),LFDNoise3.kr(8,90,150)), 0.1,1,0.5))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["wind", "mic", "noise", "brownnoise", "filter", "compander", "leakdc"],
      "description": "Simulates the sound of wind blowing on a microphone.",
      "suggested_ndef_name": "wind_on_mic",
      "source_url": "https://github.com/rukano"
    },
    "chill_pentatonic": {
      "original": "play{GVerb.ar(SinOsc.ar(Select.kr(Hasher.kr(Duty.kr((1..4)/4,0,Dwhite(0,1)))*5,midicps([0,3,5,7,10]+60))).sum,200,3)/20}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["chill", "pentatonic", "ambient", "reverb", "sine", "sequence", "random", "hasher"],
      "description": "Chill ambient texture based on pentatonic scales.",
      "suggested_ndef_name": "chill_pentatonic",
      "source_url": "https://github.com/rukano"
    },
    "percussive_blops": {
      "original": "play{var f;var p=Impulse.ar(6)+Dust.ar(1);var x=(TExpRand.ar(_,_,p));Limiter.ar(GVerb.ar(GrainFM.ar(2,p,x.(1e-4,0.01),f=x.(80,400),f/4,9),9,0.5)).flop.sum;}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["percussive", "blop", "granular", "grainfm", "random", "reverb", "limiter"],
      "description": "Percussive blops created using FM grains.",
      "suggested_ndef_name": "percussive_blops",
      "source_url": "https://github.com/rukano"
    },
    "harmonic_polyrhythms": {
      "original": "play{var e=ExpRand;RandSeed.kr(1,5);Splay.ar(Decay2.ar(Impulse.ar({e.new(1,8).round/3}!9),5e-3,{e.new(0.1,1)}!9,LFCub.ar({e.new(66,666)}!9)))}",
      "author": "Juan A. Romero (rukano)",
      "tags": ["harmonic", "polyrhythm", "kalimba", "percussive", "decay", "random", "splay"],
      "description": "Harmonic polyrhythms using decayed impulses (similar to kalimba).",
      "suggested_ndef_name": "harmonic_polyrhythms",
      "source_url": "https://github.com/rukano"
    },
    "crying_babies": {
      "original": "{k=LFNoise1.kr(8.0.rand+2,0.5,0.5);SinOsc.ar([[333,444],[222,555]]*(k+(rrand(1.0,5.0))),0,k).sum.cubed * 0.1}.play // #supercollider #babies",
      "author": "mathk",
      "tags": ["babies", "crying", "sine", "noise", "random", "weird"],
      "description": "Sound reminiscent of crying babies using modulated sine waves.",
      "suggested_ndef_name": "crying_babies",
      "source_url": "https://twitter.com/mathk"
    },
    "major_wandering": {
      "original": "play{SinOsc.ar([0.501,1,1.001,6.01]*Lag.kr(LFNoise0.kr(1).range(110,550).round(110),0.5),0,0.25).sum.clip(-0.6,0.6).cubed.dup}",
      "author": "mathk",
      "tags": ["major", "wandering", "sine", "noise", "lag", "quantized", "harmonic"],
      "description": "Wandering major-key like harmonies.",
      "suggested_ndef_name": "major_wandering",
      "source_url": "https://twitter.com/mathk"
    },
    "inharmonic_hits": {
      "original": "a=Array.series(7,7,7);play{Limiter.ar(Klank.ar(`[a.midicps+777.rand,a/77,a/7],Decay.ar(Dust.ar([7,0.7]),7)).cubed,0.77,0.7)}//#supercollider",
      "author": "mathk",
      "tags": ["inharmonic", "hits", "percussive", "klank", "decay", "dust", "random", "limiter"],
      "description": "Inharmonic percussive hits using Klank.",
      "suggested_ndef_name": "inharmonic_hits",
      "source_url": "https://twitter.com/mathk"
    },
    "phasing_saws": {
      "original": "play{RLPF.ar(LFSaw.ar([15,15.03],0,0.2),LFSaw.ar(LFNoise0.kr(0.05,-13,-14)).range(200,9000),0.1).clip(-0.8,0.3)} // #supercollider",
      "author": "mathk",
      "tags": ["phasing", "saw", "filter", "lfsaw", "noise", "clip"],
      "description": "Phasing saw waves controlled by low-frequency noise.",
      "suggested_ndef_name": "phasing_saws",
      "source_url": "https://twitter.com/mathk"
    },
    "ruler_bouncing": {
      "original": "a=Array.series(33,333.rand+111,11.0.rand+1);play{Klank.ar(`[a,a/1111,a/111],Impulse.ar([1,1.1]/3)).clip(0,1)} // #supercollider",
      "author": "mathk",
      "tags": ["ruler", "bounce", "percussive", "klank", "impulse", "random", "clip"],
      "description": "Sound like a ruler bouncing on a table, using Klank.",
      "suggested_ndef_name": "ruler_bouncing",
      "source_url": "https://twitter.com/mathk"
    },
    "bubbles": {
      "original": "{BPF.ar(Saw.ar(LFSaw.ar([1.1,-1.1],0,110,111)/11),LFSaw.kr(11,0,1110,1111),0.1)}.play",
      "author": "mathk",
      "tags": ["bubbles", "filter", "bpf", "saw", "lfsaw", "modulation"],
      "description": "Bubbling sounds created with filtered, modulated saw waves.",
      "suggested_ndef_name": "bubbles",
      "source_url": "https://twitter.com/mathk"
    },
    "alarm": {
      "original": "{Klank.ar(`[[86,97,109,120].midicps, [7,5,2,1]/10, 0.4],BrownNoise.ar(0.4) * Impulse.ar(33)) / 4 ! 2}.play",
      "author": "mathk",
      "tags": ["alarm", "klank", "noise", "impulse", "harmonic", "percussive"],
      "description": "An alarm-like sound using Klank triggered by noise bursts.",
      "suggested_ndef_name": "alarm",
      "source_url": "https://twitter.com/mathk"
    },
    "ballad": {
      "original": "{var p,f,x;ar(Splay,ar(LeakDC,ar(GrainFM,2,ar(TDuty,1/d=Dseq((1,3..21),inf)),2+ar(p=LFPar,0.3)/d*2,[2,3],f=Ddup(ar(p,0.05)*d/[3,7,5,1],Dseq((9..42).degreeToKey(Scale.phrygian),inf).midicps),f%d/12,ar(p)/2,Buffer.sendCollection(s,Env.perc.discretize))*0.23)).collect(_.sum);}.play",
      "author": "Lukas Nystrand von Unge",
      "tags": ["ballad", "granular", "grainfm", "phrygian", "sequence", "complex", "generative"],
      "description": "Complex generative ballad using FM grains.",
      "suggested_ndef_name": "ballad",
      "source_url": "https://sonomu.club/@lukiss"
    },
    "stochastic_composition": {
      "original": "{var c={|n|(m={kr(TRand,0.5,2.5,kr(d=Dust,1)).lag3(1/16)})**n}!9;ar(Splay,ar(SinOsc,c.log10*c)*(log10(ar(LFSaw,c.tan/m).abs**kr(TChoose,kr(d,1+m),[c.sum,n=c/c.sum,c.round(32),n.atan2(m),c.sin,c.tan,n.hypot(c)]).max).sin.abs**(10)).tanh,ar(SinOsc,m*m,0,0.5))}.play",
      "author": "Lukas Nystrand von Unge",
      "tags": ["stochastic", "composition", "generative", "complex", "math", "chaos", "abstract"],
      "description": "Abstract stochastic composition using complex mathematical relationships.",
      "suggested_ndef_name": "stochastic_composition",
      "source_url": "https://sonomu.club/@lukiss"
    },
    "dense_glitch_landscape": {
      "original": "{var l=ar(TChoose,ar(Dust,3!2),ar(CuspN,1s**(..5)).tanh).exprange(_,_);var a=perfectShuffle({l.(0s1,1)}!3)++({l.(1,0s1)}!3);var e=ar(EnvGen,Env(a,a/a.sum,a.neg*9).circle,1,1,0,1/f=(l.(12,999)));ar(Splay,tanh(e.blend(sin(e*f),1-g=ar(EnvGen,perc(Env,0s5,1b/f),e>0.1))+g))}.play",
      "author": "Lukas Nystrand von Unge",
      "tags": ["dense", "glitch", "landscape", "generative", "complex", "chaos", "envelope", "cuspn"],
      "description": "Dense glitch landscape generated through complex envelope manipulation.",
      "suggested_ndef_name": "dense_glitch_landscape",
      "source_url": "https://sonomu.club/@lukiss"
    },
    "catfarm": {
      "original": "{var o, a;var f=ar(o=SinOsc,a=[41,73,123,196]);ar(Splay,ar(LeakDC,{|i|a=a*5.midiratio;f=ar(o,f*a.rotate(i+3),0,ar(o,f)).tanh}!9;f.tanh),kr(o,f.sum.abs))}.play",
      "author": "Lukas Nystrand von Unge",
      "tags": ["cat", "farm", "sine", "feedback", "fm", "weird", "generative"],
      "description": "Weird sounds perhaps reminiscent of a 'cat farm' using sine feedback.",
      "suggested_ndef_name": "catfarm",
      "source_url": "https://sonomu.club/@lukiss"
    },
    "beat_metallic_sweeps": {
      "original": "{var td;var c=LFPar;var r={ar(LFDNoise3,4).abs};ar(c,(k=(td=ar(TDuty,Dwhite(1,8)/8)).lag3(1e-4,0.03))*90+50,0,k.lag3(0.03,1/4)).tanh+ar(c,80*(p=(1..60))*(p*p*6e-4),0,p.log2*1e-3*(sin(1-log2(p*td.lag3(r*1e-2,1-r)))**10)/2).sum!2}.play",
      "author": "Lukas Nystrand von Unge",
      "tags": ["beat", "metallic", "sweep", "lfpar", "tduty", "noise", "complex", "generative"],
      "description": "Rhythmic metallic sweeps using LFPar and TDuty.",
      "suggested_ndef_name": "beat_metallic_sweeps",
      "source_url": "https://sonomu.club/@lukiss"
    },
    "ambient_ligeti": {
      "original": "{var r;tanh(ar(Splay,ar(LeakDC,ar(FreeVerb,ar(Warp1,1,read(Buffer,s,Platform.resourceDir+/+\"sounds/a11wlk01.wav\"),(r={abs(ar(LFDNoise3,1/86))})!9,midiratio([-36,-9,-14,0,-19,-5,3,-2,-24,-7]),8*r!9+8/86,-1,12,1/4*r!9,4,r!9),r!9,0.5+r!9,r!9)),2/4))}.play",
      "author": "Lukas Nystrand von Unge",
      "tags": ["ambient", "ligeti", "granular", "warp", "buffer", "reverb", "noise", "complex"],
      "description": "Ambient texture inspired by Ligeti, using granular synthesis.",
      "suggested_ndef_name": "ambient_ligeti",
      "source_url": "https://sonomu.club/@lukiss"
    },
    "standard_acid": {
      "original": "{var f,l=LFDNoise1;tanh(ar(LeakDC,ar(MoogFF,ar(LFPulse,(f={ar(StandardN,kr(l,1,8,8).round(4)).abs}).value.exprange(4,80).round(1).midicps.lag(0.05)),kr(LFSaw,-8!2*f).exprange(100,f*8000),kr(l,1,2,2).abs)))}.play",
      "author": "Lukas Nystrand von Unge",
      "tags": ["acid", "tb303", "filter", "moog", "pulse", "saw", "noise", "generative"],
      "description": "Classic acid techno sound using filtered pulses.",
      "suggested_ndef_name": "standard_acid",
      "source_url": "https://sonomu.club/@lukiss"
    }
  }